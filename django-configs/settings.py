"""
Django settings for iguzman_db project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from datetime import timedelta
from django.contrib import admin
from .configs import env

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'o8ho=b&y^1(vu=bjk%n0_s1r=#s@!^w9ml-uqx54nlo_=l)h*('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = env.ALLOWED_HOSTS


# Application definition

INSTALLED_APPS = [
  'jet.dashboard',
  'jet',
  'django.contrib.admin',
  'django.contrib.auth',
  'django.contrib.contenttypes',
  'django.contrib.sessions',
  'django.contrib.messages',
  'django.contrib.staticfiles',
  'rest_framework',
  'django_filters',
  'mapwidgets',
  'colorfield',
  'tinymce',
  'common',
  'users',
  'pages',
  'nav_bar',
  'banner',
  'slides',
  'info_grid',
  'video_banner',
  'photo_mosaic'
]

MIDDLEWARE = [
  'django.middleware.security.SecurityMiddleware',
  'django.contrib.sessions.middleware.SessionMiddleware',
  'django.middleware.common.CommonMiddleware',
  'django.middleware.csrf.CsrfViewMiddleware',
  'django.contrib.auth.middleware.AuthenticationMiddleware',
  'django.contrib.messages.middleware.MessageMiddleware',
  'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'iguzman_db.urls'

TEMPLATES = [
  {
    'BACKEND': 'django.template.backends.django.DjangoTemplates',
    'DIRS': [],
    'APP_DIRS': True,
    'OPTIONS': {
      'context_processors': [
        'django.template.context_processors.debug',
        'django.template.context_processors.request',
        'django.contrib.auth.context_processors.auth',
        'django.contrib.messages.context_processors.messages',
      ],
    },
  },
]

WSGI_APPLICATION = 'iguzman_db.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
DATABASES = env.DATABASES


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
  {
    'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
  },
  {
    'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
  },
  {
    'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
  },
  {
    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
  },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATIC_URL = '/static/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MEDIA_URL = '/media/'

DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240

admin.AdminSite.site_header = env.SITE_HEADER

admin.AdminSite.index_title = env.INDEX_TITLE

admin.AdminSite.site_title = env.SITE_TITLE

admin.AdminSite.site_url = None #'/admin'

MAP_WIDGETS = env.MAP_WIDGETS

REST_FRAMEWORK = {
  'PAGE_SIZE': 10,
  'EXCEPTION_HANDLER': 'rest_framework_json_api.exceptions.exception_handler',
  'DEFAULT_PAGINATION_CLASS':
    'rest_framework_json_api.pagination.JsonApiPageNumberPagination',
  'DEFAULT_PARSER_CLASSES': (
    'rest_framework_json_api.parsers.JSONParser',
    'rest_framework.parsers.FormParser',
    'rest_framework.parsers.MultiPartParser'
  ),
  'DEFAULT_RENDERER_CLASSES': (
    'rest_framework_json_api.renderers.JSONRenderer',
    # If you're performance testing, you will want to use the browseable API
    # without forms, as the forms can generate their own queries.
    # If performance testing, enable:
    # 'example.utils.BrowsableAPIRendererWithoutForms',
    # Otherwise, to play around with the browseable API, enable:
    'rest_framework.renderers.BrowsableAPIRenderer'
  ),
  'DEFAULT_METADATA_CLASS': 'rest_framework_json_api.metadata.JSONAPIMetadata',
  'DEFAULT_FILTER_BACKENDS': (
    'rest_framework_json_api.filters.QueryParameterValidationFilter',
    'rest_framework_json_api.filters.OrderingFilter',
    'rest_framework_json_api.django_filters.DjangoFilterBackend',
    'rest_framework.filters.SearchFilter',
  ),
  'DEFAULT_AUTHENTICATION_CLASSES': (
    'rest_framework.authentication.SessionAuthentication',
    'rest_framework.authentication.BasicAuthentication',
    'rest_framework_simplejwt.authentication.JWTAuthentication',
  ),
  'SEARCH_PARAM': 'filter[search]',
  'TEST_REQUEST_RENDERER_CLASSES': (
    'rest_framework_json_api.renderers.JSONRenderer',
  ),
  'TEST_REQUEST_DEFAULT_FORMAT': 'vnd.api+json'
}

SIMPLE_JWT = {
  'ACCESS_TOKEN_LIFETIME': timedelta (
    days = env.JWT_EXPIRATION_DAYS
  ),
  'REFRESH_TOKEN_LIFETIME': timedelta (
    days = env.JWT_EXPIRATION_DAYS
  ),
  'ROTATE_REFRESH_TOKENS': False,
  'BLACKLIST_AFTER_ROTATION': True,

  'ALGORITHM': 'HS256',
  'SIGNING_KEY': SECRET_KEY,
  'VERIFYING_KEY': None,

  'AUTH_HEADER_TYPES': ('JWT', 'Bearer',),
  'USER_ID_FIELD': 'id',
  'USER_ID_CLAIM': 'user_id',

  'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
  'TOKEN_TYPE_CLAIM': 'token_type',

  'JTI_CLAIM': 'jti',

  'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
  'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
  'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

JET_THEMES = [
  {
    'theme': 'default', # theme folder name
    'color': '#47bac1', # color of the theme's button in user menu
    'title': 'Default' # theme title
  },
  {
    'theme': 'green',
    'color': '#44b78b',
    'title': 'Green'
  },
  {
    'theme': 'light-green',
    'color': '#2faa60',
    'title': 'Light Green'
  },
  {
    'theme': 'light-violet',
    'color': '#a464c4',
    'title': 'Light Violet'
  },
  {
    'theme': 'light-blue',
    'color': '#5EADDE',
    'title': 'Light Blue'
  },
  {
    'theme': 'light-gray',
    'color': '#222',
    'title': 'Light Gray'
  }
]

JET_SIDE_MENU_COMPACT = False

TINYMCE_JS_ROOT = os.path.join(STATIC_ROOT, "tiny_mce/tiny_mce_src.js")

TINYMCE_DEFAULT_CONFIG = {
  'height': 360,
  'width': 'auto',
  'cleanup_on_startup': True,
  'custom_undo_redo_levels': 20,
  'selector': 'textarea',
  'theme': 'modern',
  'plugins': '''
    textcolor save link image media preview codesample contextmenu
    table code lists fullscreen  insertdatetime  nonbreaking
    contextmenu directionality searchreplace wordcount visualblocks
    visualchars code fullscreen autolink lists  charmap print  hr
    anchor pagebreak
    ''',
  'toolbar1': '''
    fullscreen preview bold italic underline | fontselect,
    fontsizeselect  | forecolor backcolor | alignleft alignright |
    aligncenter alignjustify | indent outdent | bullist numlist table |
    | link image media | codesample |
    ''',
  'toolbar2': '''
    visualblocks visualchars |
    charmap hr pagebreak nonbreaking anchor |  code |
    ''',
  'contextmenu': 'formats | link image',
  'menubar': True,
  'statusbar': True,
}

TINYMCE_SPELLCHECKER = True
TINYMCE_COMPRESSOR = True
X_FRAME_OPTIONS = 'SAMEORIGIN'

WORKER=0
if 'worker' in os.environ:
  WORKER = os.environ['worker']

ENVIRONMENT=''
if 'env' in os.environ:
  ENVIRONMENT = os.environ['env']
